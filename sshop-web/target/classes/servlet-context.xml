<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation=" 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd 
        http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd 
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.6.xsd">
    <!-- 静态资源文件的处理-->
    <mvc:default-servlet-handler/>
	<!-- 静态资源文件的处理 二
	<mvc:resources mapping="/css/**" location="/css/" />-->

	<!-- 引入jdbc.properties属性文件方便数据源的配置 -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:config.properties,classpath:rabbitmq.properties" />
	<!-- 扫描package方便注解依赖注入-->
	<context:component-scan base-package="com.sshop" />
	<mvc:annotation-driven />
	<!-- 定时任务的注解驱动 -->
	<task:annotation-driven/>
	<aop:aspectj-autoproxy />

	<!-- 视图配置 -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/views/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="number_format">0.##########</prop>
				<prop key="auto_import">
					macro/macro.ftl as m, common/collection.ftl as co, common/goods_macro.ftl as g
					, common/goods_page.ftl as gp, common/image.ftl as img, common/order.ftl as order
					, common/public.ftl as p
				</prop>
			</props>
		</property>
		
	</bean>
	
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="prefix" value="" />
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html;charset=UTF-8"/>
	</bean>
	
	<mvc:annotation-driven>
	     <mvc:message-converters>
	            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
	            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
	   </mvc:message-converters>
	</mvc:annotation-driven>
    
    <!-- 通过工厂Bean创建mongo连接实例,没有密码就把username和password属性删除了-->
    <mongo:db-factory host="localhost" port="27017" dbname="log" />
    <!-- mongo模板操作对象-->
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean> 
    
    <!--图片验证码配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">yes</prop><!--是否有边框 -->
						<prop key="kaptcha.border.color">105,179,90</prop><!--设置边框颜色 -->
						<prop key="kaptcha.textproducer.font.color">green</prop><!--验证码文本字符颜色 默认为Color.BLACK -->
						<prop key="kaptcha.session.key">code</prop><!--验证码 -->
						<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop><!--设置字体样式 -->
						<prop key="kaptcha.border.thickness"></prop><!--边框粗细度 默认为1 -->
						<prop key="kaptcha.producer.impl"></prop><!--验证码生成器 默认为DefaultKaptcha -->
						<prop key="kaptcha.textproducer.impl"></prop><!-- 验证码文本生成器 默认为DefaultTextCreator -->
						<prop key="kaptcha.textproducer.char.string"></prop><!--验证码文本字符内容范围 默认为abcde2345678gfynmnpwx -->
						<prop key="kaptcha.textproducer.char.length">4</prop><!-- 验证码文本字符长度 默认为5 -->
						<prop key="kaptcha.textproducer.font.size">50</prop><!--验证码文本字符大小 默认为40 -->
						<prop key="kaptcha.textproducer.char.space">6</prop>    <!--验证码文本字符间距 默认为2 -->
						<prop key="kaptcha.image.width">200</prop>    <!--验证码图片宽度 默认为200 -->
						<prop key="kaptcha.image.height">60</prop> <!--验证码图片高度 默认为40 -->
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	
	
	 <!-- ======================配置rabbit mq================= -->
    <!-- 设置host username password -->
	<rabbit:connection-factory id="connectionFactory" host="${mq.host}" 
		username="${mq.username}" password="${mq.password}" />
    	
	<!-- 设置admin -->
	<rabbit:admin connection-factory="connectionFactory" />
	
    <!-- 设置template -->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
		exchange="${mq.smsexchange}" routing-key="${mq.smsroutingkey}" 
		message-converter="jsonMessageConverter" />
		
	<!-- 消息对象json转换类 -->
    <bean id="jsonMessageConverter" 
    	class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" /> 
	
	<!-- 设置一个topic exchange -->
	<rabbit:topic-exchange name="${mq.smsexchange}" durable="true" auto-declare="true" >
		<rabbit:bindings>
			<rabbit:binding queue="${mq.smsqueue}" pattern="${mq.smsbindpattern}" />
		</rabbit:bindings>
	</rabbit:topic-exchange>
	
	<!-- 设置一个queue -->
	<!--   durable:是否持久化 默认是的
			exclusive: 仅创建者可以使用的私有队列，断开后自动删除
			auto_delete: 当所有消费客户端连接断开后，是否自动删除队列 -->
	<rabbit:queue name="${mq.smsqueue}" durable="true" exclusive="false" auto-declare="true" />
	    
	    
	<!-- ########################## Redis ############################# -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="1024" />
		<property name="maxIdle" value="200" />
		<property name="maxWaitMillis" value="10000" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="127.0.0.1" />
		<property name="port" value="6379" />
		<property name="password" value="123456" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnFactory" >
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>
	
</beans>
